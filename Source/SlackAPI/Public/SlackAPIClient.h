#pragma once
#include "CoreMinimal.h"
#include "OpenAPIApiChatPostMessagePost200Response.h"
#include "OpenAPIApiChatPostMessagePostRequest.h"
#include "OpenAPIApiFilesUploadPost200Response.h"
#include "OpenAPIChatApi.h"
#include "OpenAPIFileUploadApi.h"

class SLACKAPI_API FSlackAPIClient final
{
public:
	explicit FSlackAPIClient(const FString& APIToken);

	/**
	 * Executes the chat.postMessage method of the Slack Web API synchronously.
	 * For more information about this API method, please refer to the following link:
	 * https://api.slack.com/methods/chat.postMessage
	 */
	TOptional<SlackAPI::OpenAPIApiChatPostMessagePost200Response> PostMessage(const SlackAPI::OpenAPIApiChatPostMessagePostRequest& Request);

	/**
	 * Executes the files.upload method of the Slack Web API synchronously.
	 * For more information about this API method, please refer to the following link:
	 * https://api.slack.com/methods/files.upload
	 */
	TOptional<SlackAPI::OpenAPIApiFilesUploadPost200Response> FilesUpload(const SlackAPI::OpenAPIFileUploadApi::ApiFilesUploadPostRequest& Request);

	/**
	 * Parses the payload generated by https://app.slack.com/block-kit-builder/.
	 * The parsed result can be set in and used by OpenAPIApiChatPostMessagePostRequest::Blocks.
	 * Here is an example of a payload:
{
	"blocks": [
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "*Hello*"
			}
		},
		{
			"type": "divider"
		},
	]
}
	 */
	static bool TryParseBlockKibBuilderPayload(const FString& Payload, TArray<TSharedPtr<FJsonObject>>& Out);

private:
	FString APIToken;
	TSharedRef<SlackAPI::OpenAPIChatApi> ChatAPI;
	TSharedRef<SlackAPI::OpenAPIFileUploadApi> FileUploadAPI;
	void FlushHttpRequests();
};
