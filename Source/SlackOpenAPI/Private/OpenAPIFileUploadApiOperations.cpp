/**
 * Slack Web API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIFileUploadApiOperations.h"

#include "SlackOpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace SlackAPI
{

FString OpenAPIFileUploadApi::ApiFilesUploadPostRequest::ComputePath() const
{
	FString Path(TEXT("/api/files.upload"));
	return Path;
}

void OpenAPIFileUploadApi::ApiFilesUploadPostRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/x-www-form-urlencoded") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		if (Channels.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("channels"));
			WriteJsonValue(Writer, Channels.GetValue());
		}
		if (InitialComment.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("initial_comment"));
			WriteJsonValue(Writer, InitialComment.GetValue());
		}
		if (ThreadTs.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("thread_ts"));
			WriteJsonValue(Writer, ThreadTs.GetValue());
		}
		if (Title.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("title"));
			WriteJsonValue(Writer, Title.GetValue());
		}
		if (Filename.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("filename"));
			WriteJsonValue(Writer, Filename.GetValue());
		}
		Writer->WriteIdentifierPrefix(TEXT("content"));
		WriteJsonValue(Writer, Content);
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		if(Channels.IsSet())
		{
			FormData.AddStringPart(TEXT("channels"), *ToUrlString(Channels.GetValue()));
		}
		if(InitialComment.IsSet())
		{
			FormData.AddStringPart(TEXT("initial_comment"), *ToUrlString(InitialComment.GetValue()));
		}
		if(ThreadTs.IsSet())
		{
			FormData.AddStringPart(TEXT("thread_ts"), *ToUrlString(ThreadTs.GetValue()));
		}
		if(Title.IsSet())
		{
			FormData.AddStringPart(TEXT("title"), *ToUrlString(Title.GetValue()));
		}
		if(Filename.IsSet())
		{
			FormData.AddStringPart(TEXT("filename"), *ToUrlString(Filename.GetValue()));
		}
		FormData.AddStringPart(TEXT("content"), *ToUrlString(Content));

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		if(Channels.IsSet())
		{
			FormParams.Add(FString(TEXT("channels=")) + ToUrlString(Channels.GetValue()));
		}
		if(InitialComment.IsSet())
		{
			FormParams.Add(FString(TEXT("initial_comment=")) + ToUrlString(InitialComment.GetValue()));
		}
		if(ThreadTs.IsSet())
		{
			FormParams.Add(FString(TEXT("thread_ts=")) + ToUrlString(ThreadTs.GetValue()));
		}
		if(Title.IsSet())
		{
			FormParams.Add(FString(TEXT("title=")) + ToUrlString(Title.GetValue()));
		}
		if(Filename.IsSet())
		{
			FormParams.Add(FString(TEXT("filename=")) + ToUrlString(Filename.GetValue()));
		}
		FormParams.Add(FString(TEXT("content=")) + ToUrlString(Content));

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogSlackOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIFileUploadApi::ApiFilesUploadPostResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT(""));
		break;
	}
}

bool OpenAPIFileUploadApi::ApiFilesUploadPostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
